{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\ncon;\nconst initialState = {\n  channels: [],\n  currentChannelId: 1,\n  isLoading: true\n};\nconst channelsSlice = createSlice({\n  name: 'channels',\n  initialState,\n  reducers: {\n    setChannels(state, _ref) {\n      let {\n        payload\n      } = _ref;\n      state.channels = payload;\n    }\n  }\n});\nexport const {\n  setChannels\n} = channelsSlice.actions;\nexport default channelsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","con","initialState","channels","currentChannelId","isLoading","channelsSlice","name","reducers","setChannels","state","payload","actions","reducer"],"sources":["/Users/kripton/Desktop/js/hexlet-chat/frontend/src/slices/channelsSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\ncon\nconst initialState = {\n  channels: [],\n  currentChannelId: 1,\n  isLoading: true,\n};\n\nconst channelsSlice = createSlice({\n  name: 'channels',\n  initialState,\n  reducers: {\n    setChannels(state, { payload }) {\n      state.channels = payload;\n    },\n  },\n});\n\nexport const { setChannels } = channelsSlice.actions;\nexport default channelsSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhEC,GAAG;AACH,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,gBAAgB,EAAE,CAAC;EACnBC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,aAAa,GAAGN,WAAW,CAAC;EAChCO,IAAI,EAAE,UAAU;EAChBL,YAAY;EACZM,QAAQ,EAAE;IACRC,WAAW,CAACC,KAAK,QAAe;MAAA,IAAb;QAAEC;MAAQ,CAAC;MAC5BD,KAAK,CAACP,QAAQ,GAAGQ,OAAO;IAC1B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEF;AAAY,CAAC,GAAGH,aAAa,CAACM,OAAO;AACpD,eAAeN,aAAa,CAACO,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/kripton/Desktop/js/hexlet-chat/frontend/src/components/Channel.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport cn from 'classnames';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Channel = _ref => {\n  _s();\n  let {\n    name,\n    removable,\n    id,\n    currentChannelId,\n    handleChoose\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(false);\n  const btnClass = cn('w-100', 'rounded-0', 'text-start', 'btn', {\n    'btn-secondary': id === currentChannelId\n  });\n  const chowClass = cn('d-flex', 'dropdown', 'btn-group', {\n    show: isOpen\n  });\n  const chowClassToggle = cn('dropdown-menu', {\n    show: isOpen\n  });\n  const onClickHandler = () => setIsOpen(prev => !prev);\n  const onBlurHandler = () => setIsOpen(prev => !prev);\n  const onFocusHandler = () => setIsOpen(prev => !prev);\n  if (removable) {\n    return (\n      /*#__PURE__*/\n      // <Dropdown as={ButtonGroup}  variant=\"secondary\">\n      //   <Button variant=\"secondary\" onClick={handleChoose} id={id}>{name}</Button>\n      //   <Dropdown.Toggle split variant=\"btn-secondary\" id=\"dropdown-split-basic\" />\n      //   <Dropdown.Menu>\n      //     <Dropdown.Item href=\"#/action-1\">Удалить</Dropdown.Item>\n      //     <Dropdown.Item href=\"#/action-2\">Переименовать</Dropdown.Item>\n      //   </Dropdown.Menu>\n      // </Dropdown>\n      _jsxDEV(DropdownButton, {\n        as: ButtonGroup,\n        id: `dropdown-button-drop-${direction}`,\n        drop: direction,\n        variant: \"secondary\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          eventKey: \"1\",\n          children: \"Action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          eventKey: \"2\",\n          children: \"Another action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          eventKey: \"3\",\n          children: \"Something else here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown.Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          eventKey: \"4\",\n          children: \"Separated link\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this)]\n      }, direction, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this)\n    );\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleChoose,\n      id: id,\n      className: btnClass,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"me-1\",\n        children: \"#\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Channel, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c = Channel;\nexport default Channel;\nvar _c;\n$RefreshReg$(_c, \"Channel\");","map":{"version":3,"names":["React","useState","cn","Button","ButtonGroup","Dropdown","Channel","name","removable","id","currentChannelId","handleChoose","isOpen","setIsOpen","btnClass","chowClass","show","chowClassToggle","onClickHandler","prev","onBlurHandler","onFocusHandler","direction"],"sources":["/Users/kripton/Desktop/js/hexlet-chat/frontend/src/components/Channel.js"],"sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\n\nconst Channel = ({ name, removable, id, currentChannelId, handleChoose }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const btnClass = cn('w-100', 'rounded-0', 'text-start', 'btn', {\n    'btn-secondary': id === currentChannelId,\n  });\n  const chowClass = cn('d-flex', 'dropdown', 'btn-group', {\n    show: isOpen,\n  });\n  const chowClassToggle = cn('dropdown-menu', {\n    show: isOpen,\n  });\n\n  const onClickHandler = () => setIsOpen((prev) => !prev);\n  const onBlurHandler = () => setIsOpen((prev) => !prev);\n  const onFocusHandler = () => setIsOpen((prev) => !prev);\n\n  if (removable) {\n    return (\n    // <Dropdown as={ButtonGroup}  variant=\"secondary\">\n    //   <Button variant=\"secondary\" onClick={handleChoose} id={id}>{name}</Button>\n\n    //   <Dropdown.Toggle split variant=\"btn-secondary\" id=\"dropdown-split-basic\" />\n\n    //   <Dropdown.Menu>\n    //     <Dropdown.Item href=\"#/action-1\">Удалить</Dropdown.Item>\n    //     <Dropdown.Item href=\"#/action-2\">Переименовать</Dropdown.Item>\n    //   </Dropdown.Menu>\n    // </Dropdown>\n    \n    <DropdownButton\n              as={ButtonGroup}\n              key={direction}\n              id={`dropdown-button-drop-${direction}`}\n              drop={direction}\n              variant=\"secondary\"\n            \n            >\n              <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n              <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n              <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n            </DropdownButton>\n    );\n  }\n  return (\n    <>\n      <button type=\"button\" onClick={handleChoose} id={id} className={btnClass}>\n        <span className=\"me-1\">#</span>\n        {name}\n      </button>\n    </>\n  );\n};\n\nexport default Channel;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,QAAQ,MAAM,0BAA0B;AAAC;AAAA;AAGhD,MAAMC,OAAO,GAAG,QAA6D;EAAA;EAAA,IAA5D;IAAEC,IAAI;IAAEC,SAAS;IAAEC,EAAE;IAAEC,gBAAgB;IAAEC;EAAa,CAAC;EACtE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMa,QAAQ,GAAGZ,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,KAAK,EAAE;IAC7D,eAAe,EAAEO,EAAE,KAAKC;EAC1B,CAAC,CAAC;EACF,MAAMK,SAAS,GAAGb,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE;IACtDc,IAAI,EAAEJ;EACR,CAAC,CAAC;EACF,MAAMK,eAAe,GAAGf,EAAE,CAAC,eAAe,EAAE;IAC1Cc,IAAI,EAAEJ;EACR,CAAC,CAAC;EAEF,MAAMM,cAAc,GAAG,MAAML,SAAS,CAAEM,IAAI,IAAK,CAACA,IAAI,CAAC;EACvD,MAAMC,aAAa,GAAG,MAAMP,SAAS,CAAEM,IAAI,IAAK,CAACA,IAAI,CAAC;EACtD,MAAME,cAAc,GAAG,MAAMR,SAAS,CAAEM,IAAI,IAAK,CAACA,IAAI,CAAC;EAEvD,IAAIX,SAAS,EAAE;IACb;MAAA;MACA;MACA;MAEA;MAEA;MACA;MACA;MACA;MACA;MAEA,QAAC,cAAc;QACL,EAAE,EAAEJ,WAAY;QAEhB,EAAE,EAAG,wBAAuBkB,SAAU,EAAE;QACxC,IAAI,EAAEA,SAAU;QAChB,OAAO,EAAC,WAAW;QAAA,wBAGnB,QAAC,QAAQ,CAAC,IAAI;UAAC,QAAQ,EAAC,GAAG;UAAA,UAAC;QAAM;UAAA;UAAA;UAAA;QAAA,QAAgB,eAClD,QAAC,QAAQ,CAAC,IAAI;UAAC,QAAQ,EAAC,GAAG;UAAA,UAAC;QAAc;UAAA;UAAA;UAAA;QAAA,QAAgB,eAC1D,QAAC,QAAQ,CAAC,IAAI;UAAC,QAAQ,EAAC,GAAG;UAAA,UAAC;QAAmB;UAAA;UAAA;UAAA;QAAA,QAAgB,eAC/D,QAAC,QAAQ,CAAC,OAAO;UAAA;UAAA;UAAA;QAAA,QAAG,eACpB,QAAC,QAAQ,CAAC,IAAI;UAAC,QAAQ,EAAC,GAAG;UAAA,UAAC;QAAc;UAAA;UAAA;UAAA;QAAA,QAAgB;MAAA,GAVrDA,SAAS;QAAA;QAAA;QAAA;MAAA;IAWC;EAE3B;EACA,oBACE;IAAA,uBACE;MAAQ,IAAI,EAAC,QAAQ;MAAC,OAAO,EAAEX,YAAa;MAAC,EAAE,EAAEF,EAAG;MAAC,SAAS,EAAEK,QAAS;MAAA,wBACvE;QAAM,SAAS,EAAC,MAAM;QAAA,UAAC;MAAC;QAAA;QAAA;QAAA;MAAA,QAAO,EAC9BP,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA;EACE,iBACR;AAEP,CAAC;AAAC,GAtDID,OAAO;AAAA,KAAPA,OAAO;AAwDb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}